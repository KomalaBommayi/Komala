program 1:
#include<stdio.h>
#include<stdlib.h>
struct day{
    char *dayname;
    int date,month,year;
    char *activitydescription;
};
struct day *createcalender(int size){
    struct day *calender=(struct day*)malloc(size*sizeof(struct day));
    if(calender==NULL){
        printf("memory allocation failed");
        exit (0);
    }
    return calender;
}
void readdata(struct day *calender, int size){
    for(int i=0;i<size;i++){
        printf("enter the detailes of the %d day",i+1);
        printf("dayname:");
        calender[i].dayname=(char*)malloc(20*sizeof(char));
        scanf("%s",calender[i].dayname);
        printf("date:\n");
        scanf("%d",&calender[i].date);
        printf("month:\n");
        scanf("%d",&calender[i].month);
        printf("year:\n");
        scanf("%d",&calender[i].year);
        printf("activity description:\n");
        calender[i].activitydescription=(char*)malloc(50*sizeof(char));
        scanf("%s",calender[i].activitydescription);
    }
}
void display(struct day *calender,int size){
    printf("dayname\tdate\tactivitydescription\n");
    for(int i=0;i<size;i++){
        printf("%s\t\t%d-%d-%d\t\t%s\n",calender[i].dayname,calender[i].date,calender[i].month,calender[i].year,calender[i].activitydescription);
    }
}
void freememory(struct day *calender,int size){
    for(int i=0;i<size;i++){
        free(calender[i].dayname);
        free(calender[i].activitydescription);
    }
    free(calender);
}
int main(){
    int size;
    printf("enter the number of days\n");
    scanf("%d",&size);
    struct day *calender=createcalender(size);
    readdata(calender,size);
    display(calender,size);
    freememory(calender,size);
}
program 02:
#include<stdio.h>
#include<string.h>
void readstring(char str[100],char pat[50],char rep[50]){
    printf("enter the main string\n");
    gets(str);
    printf("enter the patter string\n");
    gets(pat);
    printf("enter the replace\n");
    gets(rep);
}
void replacestring(char str[100],char pat[50],char rep[50]){
    int i=0,j=0,k=0,flag=0,m=0,c=0;
    char ans[100];
    while(str[c]!='\0'){
        if(str[m]==pat[i]){
            m++;i++;
            flag=1;
            if(pat[i]=='\0'){
            for(k=0;rep[k]!='\0';k++,j++)
            ans[j]=rep[k];
            i=0;c=m;
        }
    }
    else{
        ans[j]=str[c];
        j++;c++;
        i=0;m=c;
    }
}
if(flag==0){
    printf("pattern does not found\n");
}
else{
    ans[j]='\0';
    printf("the resultant string is %s",ans);
}
}
int main(){
    char str[100],pat[50],rep[50];
    readstring(str,pat,rep);
    replacestring(str,pat,rep);
    return 0;
}
program 03:
#include<stdio.h>
#include<stdlib.h>
#define max 4
void push(int s[],int *top){
    int ele;
    if(*top==max-1){
        printf("stach overflow");
    }
    else{
        printf("enter the item to be inserted in the stack");
        scanf("%d",&ele);
        s[++(*top)]=ele;
    }
}
int pop(int s[],int *top){
    return (s[(*top)--]);
}
void palindrom(int v[],int top){
    int i=0,flag=0,ele;
    for(i=0;i<(top+1);i++){
    ele=pop(v,&top);
    if(ele==v[i])
    flag=1;
    else
    flag=0;
}
if(flag==0)
    printf("stack elements are not palindrom");
    else
    printf("stack elements are palindrom");
}
void display(int s[],int top){
    int i;
    if(top==-1)
        printf("stack underflow\n");
        else{
            printf("the stack elements are:\n");
            for(int i=0;i<=top;i++)
            printf("%d",s[i]);
        }
    }
    int main(){
        int ch,ele,s[max],top=-1;
        while(1){
        printf("menu option\n1.push into stack\n2.pop from the top\n3.palindrom\n4.display\n5.exit\n");
        printf("enter your choice\n");
        scanf("%d",&ch);
        switch(ch){
            case 1:push(s,&top);
            break;
            case 2:if(top==-1){
                printf("stack underflow\n");
            }
            else{
                ele=pop(s,&top);
                printf("the deleted element is %d",ele);
            }
            break;
            case 3:palindrom(s,top);
            break;
            case 4:display(s,top);
            break;
            case 5:exit(1);
            break;
            default:printf("enter the valid choice\n");
            break;
            
            }
            }
        }
        program 04:
        #include<stdio.h>
#include<string.h>
int f(char);
int g(char);
void infixtopostfix(char[],char[]);
int f(char sym){
    switch(sym){
        case '+':
        case '-':return 2;
        case '*':
        case '/':
        case '%':return 4;
        case '^':
        case '$':return 5;
        case '(':return 0;
        case '#':return -1;
        default: return 8;
    }
}
int g(char sym){
    switch(sym){
        case '+':
        case '-':return 1;
        case '*':
        case '/':
        case '%':return 3;
        case '^':
        case '$':return 6;
        case '(':return 9;
        case ')':return 0;
        default: return 7;
    }
}
int main(){
    char infix[50],postfix[50];
    printf("enter the infix expression\n");
    scanf("%s",infix);
    infixtopostfix(infix,postfix);
    printf("infix expression is %s and the equvalent postfix expression is %s",infix,postfix);
    return 0;
}
void infixtopostfix(char in[],char post[]){
    int i=0,j=0,top=-1;
    char stk[50],sym;
    stk[++top]='#';
    while(in[i]!='\0'){
        sym=in[i++];
        while(f(stk[top])>g(sym))
            post[j++]=stk[top--];
            if(f(stk[top])!=g(sym))
            stk[++top]=sym;
            else
            stk[top--];
        }
    
    while(stk[top]!='#'){
        post[j++]=stk[top--];
    }
    post[j++]='\0';
}
program 05:
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<ctype.h>
void push(float stk[],int *top,float op){
    *top=*top+1;
    stk[*top]=op;
}
float pop(float stk[], int *top){
    float res;
    res=stk[*top];
    *top=*top-1;
    return res;
}
float compute(float op1,float op2,char s){
    switch(s){
        case '+':return op1+op2;
        break;
        case '-':return op1-op2;
        break;
        case '*':return op1*op2;
        break;
        case '/':return op1/op2;
        break;
        case '^':return pow(op2,op1);
        break;
    }
}
void evalpostfix(){
    int i=0,j=0,top=-1;
    char sym,post[20];
    float stk[20],op1,op2,res,item;
    printf("enter valid postfix expression\n");
    scanf("%s",post);
    while(post[i]!='\0'){
        sym=post[i++];
        if(isdigit(sym))
        {
            item=sym-'0';
            push(stk,&top,item);
        }
        else
        {
            op2=pop(stk,&top);
            op1=pop(stk,&top);
            res=compute(op1,op2,sym);
            push(stk,&top,res);
        }
    }
     res=pop(stk,&top);
     printf("the result of postfix expression is %f",res );
    }
void main(){
    evalpostfix();
}
program 06:
#include<stdio.h>
#include<stdlib.h>
#define max 2
void insert(char q[],int *r,int *count){
    int ele;
    if(*count==max){
        printf("queue overflow\n");
        return;
    }
    else{
     *r=(*r+1)%max;
    printf("enter the element to be inserted\n");
    scanf("%s",&ele);
    q[*r]=ele;
    (*count)++;
    }
}
void deleteele(char q[],int *f,int *count){
    if(*count==0){
        printf("queue underflow\n");
        return;
    }
    else{
        printf("deleted element is %s",q[*f]);
        *f=(*f+1)%max;
      ( *count)--;
    }
}
void display(char q[],int f,int count){
    int j,i;
    if(count==0){
        printf("queue underflow\n");
        return;
    }
    else{
        j=f;
        for(i=0;i<count;i++){
            printf("%d",q[j]);
            j=(j+1)%max;
        }
    }
}
void main(){
    int ch;
    char q[max];
    int f=0,r=-1,count=0;
    while(1){
        printf("menu option\n1.insert into the queue\n2.delete from the queue\n3.display\n 4.exit\n");
        printf("enter your choice\n");
        scanf("%d",&ch);
        switch(ch){
            case 1:insert(q,&r,&count);
            break;
            case 2:deleteele(q,&f,&count);
            break;
            case 3:display(q,f,count);
            break;
            case 4:exit(0);
            break;
            default:printf("enter the valid choice\n");
            break;
        }
    }
}



program 10
#include<stdio.h>
#include<stdlib.h>
struct node
{
 int info;
 struct node *llink;
 struct node *rlink;
};
typedef struct node *NODE;
NODE insert(NODE root,int item)
{
 NODE temp,cur,prev;
 temp=(NODE)malloc(sizeof(NODE));
 temp->info=item;
 temp->llink=temp->rlink=NULL;
 if(root==NULL)
 return temp;
 cur=root;
 
while(cur!=NULL)
 
{
 
prev=cur;
 
if(cur->info==item)
 
{
 
printf("insertion not possible");
 
free(temp);
 
return;
 
}
 
if(cur->info > item)
 
cur=cur->llink;
 
else
cur=cur->rlink;
 
}
 if(prev->info>item)
 prev->llink=temp;
 else 
 prev->rlink=temp;
 return root;
}
void search(NODE root,int key)
{
 NODE cur;
 cur=root;
 
if(root==NULL)
 
{
 
printf("tree is empty");
 
return;
 
}
 
while(cur!=NULL)
 
{
 
if(cur->info==key)
 
{
 
printf("key element is found");
 
return;
 
}
 
if((cur->info)>key)
 
cur=cur->llink;
 
else 
 
cur=cur->rlink;
 
}
 printf("key not found");
} 
void preorder(NODE root)
{
if(root==NULL) return;
printf("%d\t",root->info);
preorder(root->llink);
preorder(root->rlink);
}
void postorder(NODE root)
{
 if(root==NULL)return;
 postorder(root->llink);
 postorder(root->rlink);
 printf("%d\t",root->info);
}
void inorder(NODE root)
{
 if(root==NULL)return;
 inorder(root->llink);
 printf("%d\t",root->info);
 inorder(root->rlink);
}
void main()
{
 int ch,x,item,key;
 NODE root=NULL;
 
while(1)
 
{
 printf("\n1.create a BST\n2.traverse inpreorder\n3.traverse in 
postorder\n4.inorder");
 printf("\n5.search in a BST\n6.exit");
 printf("\nenter choice:");
 
scanf("%d",&ch);
 
switch(ch)
 
{
 
case 1 : 
do
 
{
 
printf("enter the element to be inserted:");
 
scanf("%d",&item);
 
root=insert(root,item);
 
printf("enter 1 to continue 0 to exit");
 
scanf("%d",&x);
 
}while(x!=0);
 
break;
 
case 2 : preorder(root); 
 
break;
 
case 3 : postorder(root);
 
break;
 
case 4 : inorder(root);
 
break;
 
case 5 : printf("enter the element to search:");
 
scanf("%d",&key);
 
search(root,key);
 
break;
 
case 6 : exit(0);
 
}
 
}
}


program 11
#include<stdio.h>
#include<stdlib.h>
int a[10][10],n,s[10]={0};
void bfs(int u)
 {
 
int f,r,q[10],v,i,s[10]={0};
 
printf("The Nodes visited from %d:",u);
 
f=0;r=-1; 
 
q[++r]=u; 
 
s[u]=1; 
 
printf(" %d",u);
 
while(f<=r)
 
{
 
 u=q[f++]; 
 
for(v=0;v<n;v++)
 
if(a[u][v]==1) 
 
if(s[v]==0) 
 
{
 
printf(" %d",v); 
 
s[v]=1; 
 
q[++r]=v; 
 
}
 
}
 
printf("\n");
 }
void dfs(int u)
 { 
 int v;
 s[u]=1;
 printf("%d ",u);
 
for(v=0;v<n;v++)
 
if(a[u][v] ==1 && s[v]==0)
 
dfs(v);
 }
int main()
{ 
 int u,i,j,ch;
 while(1)
 
{
 printf("\n1.Create a graph");
 
printf("\n2.Traversal using BFS");
 
printf("\n3.Traversal using DFS");
 printf("\n4.Exit");
 
printf("\nEnter your choice :");
scanf("%d",&ch);
 
switch(ch)
 
{
case 1:printf("Enter the number of nodes");
scanf("%d",&n);
for(i=0;i<n;i++)
 
for(j=0;j<n;j++)
{
printf("\n Enter A[%d][%d]=",i,j);
 
scanf("%d",&a[i][j]);
}
break;
 
case 2: printf("\n Enter the starting/source verstex ");
 
scanf("%d",&u);
 
bfs(u);
 
break; 
 
case 3: printf("\n Enter the starting/source verstex ");
 
scanf("%d",&u);
 
for(i=0;i<10;i++) 
 
s[i]=0;
 
printf("The nodes visted from %d:",u);
 
dfs(u);
 
break;
 
case 4: _Exit(0);
 
}
 
}
} 


program 12
#include <stdio.h>
#include <stdlib.h> 
#define MAX 10
int count=0;
struct employee
{
 
int id;
 
char name[15]; 
};
typedef struct employee EMP;
EMP emp[MAX];
int a[MAX];
int create(int num) 
{
 
int key;
 
key = num % 10; 
 
return key;
 
}
int getemp(EMP emp[],int key) 
 
{
 
printf("\nEnter emp id: "); 
scanf("%d",&emp[key].id); 
printf("\nEnter emp name: ");
scanf("%s",emp[key].name); 
return key;
}
void display() 
{
int i, ch;
printf("\n1.Display ALL\n2.Filtered Display"); 
printf("\nEnter the choice: "); 
scanf("%d",&ch);
if(ch == 1) 
{
printf("\nThe hash table is:\n"); 
printf("\nHTKey\tEmpID\tEmpName"); 
for(i=0; i<MAX; i++)
printf("\n%d\t%d\t%s", i, emp[i].id, emp[i].name);
}
else 
{
printf("\nThe hash table is:\n"); 
printf("\nHTKey\tEmpID\tEmpName"); 
for(i=0; i<MAX; i++)
if(a[i]!= -1)
printf("\n%d\t%d\t %s", i, emp[i].id, emp[i].name); 
} 
}
void linear_prob(int key) 
{
int i; 
if(count==MAX)
{
printf("Hash Table is full");
return;
}
if(a[key] == -1) 
{
a[key]=getemp(emp,key); 
count++;
}
else
{
printf("\nCollision Detected...!!!\n");
i=(key+1)%MAX;
printf("%d",i);
while(i < MAX||i<key)
{
if (a[i]==-1)
{
a[i]=getemp(emp,i);
count++;
break;
}
else
i=(i+1)%MAX; 
}
}
} 
void main()
{
int num, key, i,x; 
printf("\nCollision handling by linear probing: "); 
for (i=0; i < MAX; i++)
a[i] = -1;
do 
{
printf("\nEnter the data: ");
scanf("%d", &num);
key=create(num);
linear_prob(key);
display(emp);
printf("\nDo you wish to continue? (1/0): "); 
scanf("%d",&x);
}while(x!=0); 
}



program8
#include<stdio.h>
#include<stdlib.h>
int count;
struct node
{
 int ssn;
 char name[15];
 char dept[10];
 char designation[10];
 int sal;
 char phono[12];
 struct node *rlink;
 struct node *llink;
 };
 typedef struct node *NODE;
 NODE createlist(NODE Head);
 NODE insertfront(NODE Head);
 NODE insertrear(NODE Head);
 NODE deletefront(NODE Head);
 NODE deleterear(NODE Head);
 NODE DEqueue(NODE Head);
 void display(NODE Head);
 NODE insertrear(NODE Head)
 {
  NODE temp,cur;
  temp=(NODE)malloc(sizeof(struct node));
  printf("enter the employee details\n");
  printf("Enter the ssn,name,department,designation,salary,phonenumber");
  scanf("%d%s%s%s%d%s",&temp->ssn,temp->name,temp->dept,temp->designation,&temp->sal,temp->phono);
  cur=Head->llink;
  cur->rlink=temp;
  temp->rlink=Head;
  temp->llink=cur;
  Head->llink=temp;
  count++;
  return Head;
  }
  void display(NODE Head)
  {
   NODE cur;
   if(Head->rlink==Head)
   {
   printf("list is empty\n");
   return;
   }
   cur=Head->rlink;
   printf("Employee details\n");
   printf("ssn\tname\tdepartment\tdesignation\tsalary\tphoneno\n");
   while(cur!=Head)
   {
   printf("%d\t%s\t%s\t%s\t%d\t%s\n",cur->ssn,cur->name,cur->dept,cur->designation,cur->sal,cur->phono);
   cur=cur->rlink;
   }
   printf("the total number of employees is %d",count);
   }
   NODE deleterear(NODE Head)
   {
   NODE cur,prev;
   if(Head->rlink==Head)
   {
   printf("list is empty\n");
   return Head;
   }
   cur=Head->llink;
   prev=cur->llink;
   printf("deleted employee details is \n");
   printf("%d\t%s\t%s\t%s\t%d\t%s\n",cur->ssn,cur->name,cur->dept,cur->designation,cur->sal,cur->phono);
   Head->llink=prev;
   prev->rlink=Head;
   free(cur);
   count--;
   return Head;
   }
   NODE insertfront(NODE Head)
   {
   NODE cur,temp;
   temp=(NODE)malloc(sizeof(struct node));
   printf("\nEnter the employee details");
   printf("ssn,name,department,designation,salary,phonenumber");
   scanf("%d%s%s%s%d%s",&temp->ssn,temp->name,temp->dept,temp->designation,&temp->sal,temp->phono);
   cur=Head->rlink;
   cur->llink=temp;
   Head->rlink=temp;
   temp->rlink=cur;
   temp->llink=Head;
   count++;
   return Head;
   }
   NODE deletefront(NODE Head)
   {
   NODE next,cur;
   if(Head->rlink==Head)
   {
    printf("list is empty\n");
    return Head;
    }
    cur=Head->rlink;
    next=cur->rlink;
    printf("deleted employee details is");
    printf("%d\t%s\t%s\t%s\t%d\t%s",cur->ssn,cur->name,cur->dept,cur->designation,cur->sal,cur->phono);
    Head->rlink=next;
    next->llink=Head;
    count--;
    return Head;
    }
    NODE DEqueue(NODE Head)
    {
    int ch;
    while(1)
    {
     printf("DE operation\n");
     printf("1.insertfront\n2.deleterear\n3.insertrear\n4.deletefront\n5.Exit\n");
     printf("enter your choice\n");
     scanf("%d",&ch);
     switch(ch)
     {
     case 1:Head=insertfront(Head);
            break;
     case 2:Head=deleterear(Head);
            break;
      
     case 3:Head=insertrear(Head);
            break;
      
     case 4:Head=deletefront(Head);
            break;
     case 5:return Head;
     }
     }
     }
     void main()
     {
     int ch,i;
     NODE Head;
     Head=(NODE)malloc(sizeof(struct node));  
     Head->rlink=Head;
     Head->llink=Head;
     while(1)
     {
     printf("dll main menu");
     printf("1.createalist\n2.display\n3.insertrear\n4.deleterear\n5.insertfront\n6.deletefront\n7.demonstrateDequeue\n8.Exit\n");
     printf("\nEnter your choice");
     scanf("%d",&ch);
     switch(ch)
     {
      case 1:printf("enter number of employee list to be created\n");
             scanf("%d",&count);
             for(i=0;i<count;i++)
             {
             Head=insertrear(Head);
             count--;
             }
             break;
      case 2:display(Head);
             break;
      case 3:Head=insertrear(Head);
             break;
      case 4:Head=deleterear(Head);
             break;
      case 5:Head=insertfront(Head);
             break;
      case 6:Head=deletefront(Head);
             break;
      case 7:Head=DEqueue(Head);
             break;
      case 8:_Exit(0);
             break;
      default:printf("Enter the valid choice\n");
              break;
      }
      }
      }